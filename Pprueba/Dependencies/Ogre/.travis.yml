language: cpp
sudo: required
dist: trusty
branches:
  only:
    - master
addons:
  apt:
    sources:
    - sourceline: "deb http://archive.ubuntu.com/ubuntu/ trusty multiverse"
    - sourceline: "deb http://archive.ubuntu.com/ubuntu/ trusty-backports universe"
    - sourceline: "ppa:nschloe/swig-backports"
    packages:
    - cmake
    - libxaw7-dev
    - libzzip-dev
    - libxrandr-dev
    - libfreetype6-dev
    - libxt-dev
    - libboost-all-dev
    - libgles2-mesa-dev
    - mesa-common-dev
    - libgl1-mesa-dev
    - libglu1-mesa-dev # legacy GL RenderSystem only
    - python3-dev
    - python3-lxml     # for validate script
    - nvidia-cg-dev
    - swig3.0
before_script:
    # we start compilation afterwards anyway, so no need to sleep
    - if [ "$TRAVIS_OS_NAME" = "linux" ]; then export DISPLAY=:99.0 && sh -e /etc/init.d/xvfb start ; fi
    - if [ "$TRAVIS_OS_NAME" =   "osx" ]; then brew update && brew install freetype libzzip sdl2 ; fi
osx_image: xcode8.3
env:
    - TEST=TRUE
    - GL3ES=TRUE # build GL3Plus and GLES2 Rendersystems
    - ANDROID=TRUE
    - IOS=TRUE
compiler:
    - clang
    - gcc
matrix:
    exclude:
        - os: linux
          compiler: clang
        - os: linux
          env: IOS=TRUE
        - os: linux
          env: GL3ES=TRUE
        - os: osx
          compiler: gcc
        - os: osx
          env: TEST=TRUE
        - os: osx
          env: ANDROID=TRUE
script:
    - cmake -P ci-build.cmake
    - BUILD_CMD="cmake --build ."
    - if [ "$TRAVIS_OS_NAME" = "linux" ]; then BUILD_CMD="$BUILD_CMD -- -k -j 2" ; fi
    - if [ "$TRAVIS_OS_NAME" == "osx" ]; then BUILD_CMD="set -o pipefail && $BUILD_CMD | xcpretty" ; fi
    - echo $BUILD_CMD && eval $BUILD_CMD
    # run unit tests
    - if [ $TEST ]; then bin/Test_Ogre ; fi
    - if [ "$TRAVIS_OS_NAME" == "osx" -a "$IOS" != "TRUE" ]; then bin/Debug/Test_Ogre.app/Contents/MacOS/Test_Ogre ; fi
    # XMLConverter works & validates
    - if [ $TEST ]; then bin/OgreXMLConverter Samples/Media/models/jaiqua.mesh && bin/OgreXMLConverter Samples/Media/models/jaiqua.skeleton ; fi
    - if [ $TEST ]; then python3 Tools/XMLConverter/docs/validate.py Samples/Media/models/jaiqua.mesh.xml ; fi
    # run visual tests
    - if [ $TEST ]; then cd bin && ./TestContext -rs "OpenGL Rendering Subsystem" ; fi
    # verify that the python modules are loadable
    - if [ $TEST ]; then cd ../lib && python3 -c "import _Ogre; import _OgreRTShader" ; fi
os:
    - linux
    - osx
cache: apt
